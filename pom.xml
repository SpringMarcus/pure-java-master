<?xml version="1.0" encoding="UTF-8"?>
<!-- pom - project object e_entity -->
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <!-- POM e_entity version (always 4.0.0) -->
    <modelVersion>4.0.0</modelVersion>

    <!-- group or organization that this project belongs to
    often inverted domain name -->
    <groupId>com.marcus.chiu</groupId>

    <!-- name given to this project library -->
    <artifactId>SpringMVC</artifactId>

    <!-- version of this project -->
    <version>1.0-SNAPSHOT</version>

    <!-- how this project should be packaged jar(default) or war -->
    <!-- name of jar or war file will be artifact id + version -->
    <packaging>war</packaging>

    <name>TheRealSpring</name>
    <url>http://maven.apache.org</url>

    <!-- variables used in dependencies below -->
    <properties>
        <springframework.version>4.0.6.RELEASE</springframework.version>
        <!-- org.hibernate.Criteria not yet deprecated -->
        <hibernate.version>4.3.6.Final</hibernate.version>
        <!-- <hibernate.version>5.0.2.Final</hibernate.version> -->
        <mysql.connector.version>5.1.31</mysql.connector.version>
        <jackson-version>2.7.2</jackson-version>
        <joda-time.version>2.3</joda-time.version>
        <testng.version>6.9.4</testng.version>
        <mockito.version>1.10.19</mockito.version>
        <h2.version>1.4.187</h2.version>
        <dbunit.version>2.2</dbunit.version>
    </properties>
    <!--
    <properties>
        <joda-time.version>2.3</joda-time.version>
        org.hibernate.Criteria is deprecated at version 5
        <hibernate.version>5.0.1.Final</hibernate.version>
        <springframework.version>4.2.4.RELEASE</springframework.version>
        <kotlin.version>1.0.4</kotlin.version>
        <mysql.connector.version>5.1.34</mysql.connector.version>
        <joda-time.version>2.3</joda-time.version>

        <testng.version>6.9.4</testng.version>
        <mockito.version>1.10.19</mockito.version>
        <h2.version>1.4.187</h2.version>
        <dbunit.version>2.2</dbunit.version>
    </properties>-->

    <dependencies>
        <!-- this is where you get dependencies -->
        <!-- https://mvnrepository.com/ -->

         <!-- Example Dependency
         <dependency>

            //The group/organization this belongs to
            <groupId>mysql</groupId>

            //The library that's required
            <artifactId>mysql-connector-java</artifactId>

            //The version of the requested library
            <version>5.1.34</version>

            // scope
            // 'compile' by default - which is ready at compile time
            // 'provided' - will be provided at runtime by a container running the code
            // 'test' - used for compiling tests, but not required for building/running code
            // 'runtime' - This scope indicates that the dependency is not required for compilation,
                           but is for execution. It is in the runtime and test classpaths, but not
                           the compile classpath.
            // 'system' - This scope is similar to provided except that you have to provide the JAR
                          which contains it explicitly. The artifact is always available and is not
                          looked up in a repository. import (only available in Maven 2.0.9 or later):
                          This scope is only used on a dependency of type pom in the section.
                          It indicates that the specified POM should be replaced with the dependencies
                          in that POM's section. Since they are replaced, dependencies with a scope of
                          import do not actually participate in limiting the transitivity of a dependency.

            <scope>runtime</scope>

        </dependency>
        -->

        <!-- Spring -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <version>${springframework.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-web</artifactId>
            <version>${springframework.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>${springframework.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-tx</artifactId>
            <version>${springframework.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-orm</artifactId>
            <version>${springframework.version}</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload -->
        <!-- needed for CommonsMultipartResolver bean -->
        <dependency>
            <groupId>commons-fileupload</groupId>
            <artifactId>commons-fileupload</artifactId>
            <version>1.3.2</version>
        </dependency>

        <!-- Hibernate -->
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-core</artifactId>
            <version>${hibernate.version}</version>
        </dependency>
        <!-- for using HibernatePersistenceProvider class -->
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-entitymanager</artifactId>
            <version>${hibernate.version}</version>
        </dependency>

        <!-- jsr303 validation -->
        <dependency>
            <groupId>javax.validation</groupId>
            <artifactId>validation-api</artifactId>
            <version>1.1.0.Final</version>
        </dependency>
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-validator</artifactId>
            <version>5.1.3.Final</version>
        </dependency>

        <!-- MySQL -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>${mysql.connector.version}</version>
        </dependency>

        <!-- Joda-Time -->
        <dependency>
            <groupId>joda-time</groupId>
            <artifactId>joda-time</artifactId>
            <version>${joda-time.version}</version>
        </dependency>

        <!-- To map JodaTime with database type -->
        <dependency>
            <groupId>org.jadira.usertype</groupId>
            <artifactId>usertype.core</artifactId>
            <version>3.0.0.CR1</version>
        </dependency>

        <!-- Servlet+JSP+JSTL -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>3.1.0</version>
        </dependency>
        <dependency>
            <groupId>javax.servlet.jsp</groupId>
            <artifactId>javax.servlet.jsp-api</artifactId>
            <version>2.3.1</version>
        </dependency>
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
            <version>1.2</version>
        </dependency>

        <!-- Jackson -->
        <!-- Both jackson-core and jackson-databind are needed for Spring's @RestController
             to be able to turn objects into JSON format -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-core</artifactId>
            <version>${jackson-version}</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>${jackson-version}</version>
        </dependency>

        <!-- project lombok is awesome -->
        <!-- https://projectlombok.org/ -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.16.10</version>
            <!-- <scope>provided</scope> -->
        </dependency>



        <!-- Testing dependencies -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-test</artifactId>
            <version>${springframework.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.testng</groupId>
            <artifactId>testng</artifactId>
            <version>${testng.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-all</artifactId>
            <version>${mockito.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <version>${h2.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>dbunit</groupId>
            <artifactId>dbunit</artifactId>
            <version>${dbunit.version}</version>
            <scope>test</scope>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc -->
        <!-- <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>4.3.3.RELEASE</version>
        </dependency> -->

        <!-- JPA -->
        <!-- <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-entitymanager</artifactId>
            <version>4.3.7.Final</version>
        </dependency>
        <dependency>
            <groupId>org.hibernate.javax.persistence</groupId>
            <artifactId>hibernate-jpa-2.1-api</artifactId>
            <version>1.0.0.Final</version>
        </dependency> -->

        <!-- annotation library for accessors and mutators/setters -->
        <!-- <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.14.8</version>
            <scope>compile</scope>
        </dependency> -->

        <!--<dependency>
            <groupId>org.jetbrains.kotlin</groupId>
            <artifactId>kotlin-stdlib</artifactId>
            <version>${kotlin.version}</version>
        </dependency>
        <dependency>
            <groupId>org.jetbrains.kotlin</groupId>
            <artifactId>kotlin-test</artifactId>
            <version>${kotlin.version}</version>
            <scope>test</scope>
        </dependency>-->

    </dependencies>


    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.2</version>
                    <configuration>
                        <source>1.7</source>
                        <target>1.7</target>
                    </configuration>
                </plugin>

                <!-- maven-war-plugin allows us to use full annotation a_configuration -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-war-plugin</artifactId>
                    <version>2.4</version>
                    <configuration>
                        <!-- configures plugin to build war package -->
                        <warSourceDirectory>src/main/webapp</warSourceDirectory>
                        <warName>SpringHibernateExample</warName>
                        <failOnMissingWebXml>false</failOnMissingWebXml>
                    </configuration>
                </plugin>
            </plugins>

            <!--
            <plugin>
                <groupId>org.springframework.boot</groupOd>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
            -->
        </pluginManagement>
        <finalName>SpringHibernateExample</finalName>
    </build>

    <!--<build>
        <plugins>
            <plugin>
                <groupId>org.jetbrains.kotlin</groupId>
                <artifactId>kotlin-maven-plugin</artifactId>
                <version>${kotlin.version}</version>
                <executions>
                    <execution>
                        <id>compile</id>
                        <phase>process-sources</phase>
                        <goals>
                            <goal>compile</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>test-compile</id>
                        <phase>process-test-sources</phase>
                        <goals>
                            <goal>test-compile</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>-->

</project>